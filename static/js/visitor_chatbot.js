// ==========================================
// Chatbot Visiteur - Version Moderne & Pro
// ==========================================

document.addEventListener('DOMContentLoaded', function() {
    console.log('ü§ñ Initialisation du chatbot visiteurs (Version Pro)...');
    
    // √âl√©ments DOM
    const chatbotButton = document.getElementById('visitor-chatbot-button');
    const chatbotWindow = document.getElementById('visitor-chatbot-window');
    const chatbotClose = document.getElementById('chatbot-close');
    const chatbotMessages = document.getElementById('chatbot-messages');
    const chatbotInput = document.getElementById('chatbot-input');
    const chatbotSend = document.getElementById('chatbot-send');
    
    // √âtat du chatbot
    let isOpen = false;
    let conversationHistory = [];
    let isTyping = false;
    
    // Messages de bienvenue et contexte
    const SYSTEM_CONTEXT = `Tu es l'assistant virtuel de NeuroScan, une plateforme m√©dicale d'analyse IA pour les tumeurs c√©r√©brales.

R√àGLES STRICTES:
1. Tu DOIS r√©pondre UNIQUEMENT aux questions concernant le projet NeuroScan et ses fonctionnalit√©s
2. Tu NE DOIS PAS r√©pondre aux questions m√©dicales g√©n√©rales, diagnostics ou conseils de sant√©
3. Si on te pose une question m√©dicale, redirige poliment vers un professionnel de sant√©

INFORMATIONS SUR NEUROSCAN:

Pr√©sentation:
- Plateforme d'intelligence artificielle pour l'analyse d'images IRM c√©r√©brales
- D√©tection automatique de tumeurs avec pr√©cision de 99.7%
- R√©sultats en moins de 10 secondes
- Interface moderne et intuitive

Fonctionnalit√©s principales:
1. Analyse IA CNN (R√©seau de Neurones Convolutionnel)
   - D√©tection de 4 types: Normal, Gliome, M√©ningiome, Tumeur pituitaire
   - Pr√©cision: 99.7% valid√©e cliniquement
   - Temps d'analyse: < 10 secondes
   - Rapports d√©taill√©s avec probabilit√©s

2. Chat M√©dical IA
   - Assistant conversationnel sp√©cialis√© en neurologie
   - Questions m√©dicales et interpr√©tation d'examens
   - Historique des conversations
   - Interface moderne

3. Gestion des Patients
   - Dossiers m√©dicaux complets
   - Suivi longitudinal et √©volution
   - Historique des analyses
   - Export de rapports PDF

4. Tableau de Bord Professionnel
   - Statistiques en temps r√©el
   - Graphiques interactifs
   - M√©triques de performance
   - Alertes m√©dicales

5. S√©curit√© et Conformit√©
   - Chiffrement AES-256 de bout en bout
   - Conformit√© RGPD
   - Certification ISO 27001
   - CE M√©dical
   - Infrastructure cloud s√©curis√©e

Statistiques de performance:
- Pr√©cision: 99.7%
- Temps d'analyse: < 10 secondes
- 50,000+ analyses effectu√©es
- 500+ m√©decins utilisateurs
- 98.7% de satisfaction m√©decins

Processus d'utilisation:
1. Upload s√©curis√© de l'image IRM (DICOM, NIfTI, JPEG, PNG)
2. Analyse IA automatique en moins de 10s
3. R√©sultats d√©taill√©s avec classification et probabilit√©s
4. G√©n√©ration rapport PDF professionnel

Technologies:
- Deep Learning CNN (PyTorch)
- Mod√®le entra√Æn√© sur 100,000+ images valid√©es
- API Gemini pour le chat m√©dical
- Base de donn√©es SQLite pour le suivi
- Interface Flask avec design moderne

Acc√®s:
- Inscription gratuite pour les m√©decins
- Authentification s√©curis√©e
- Dashboard personnel
- Support 24/7

Contact:
- Email: mohammed.betkaoui@neuroscan.ai
- T√©l√©phone: +123783962348
- Adresse: Bordj Bou Arr√©ridj, Alg√©rie

R√©ponds de mani√®re concise, professionnelle et amicale. Si la question sort du contexte de NeuroScan, explique poliment que tu ne peux r√©pondre qu'aux questions sur la plateforme.`;

    const WELCOME_MESSAGE = "üëã **Bienvenue sur NeuroScan!**\n\nJe suis votre assistant virtuel, pr√™t √† vous aider √† d√©couvrir notre plateforme d'analyse IA pour les tumeurs c√©r√©brales.\n\nüí° *Astuce: Cliquez sur une suggestion ci-dessous ou posez votre question!*";
    
    // Suggestions rapides
    const QUICK_SUGGESTIONS = [
        "Comment fonctionne l'analyse IA? üß†",
        "Quelles fonctionnalit√©s proposez-vous? ‚ö°",
        "Quelle est la pr√©cision du syst√®me? üéØ",
        "Comment cr√©er un compte? üë§",
        "Quels types de tumeurs d√©tectez-vous? üî¨"
    ];
    
    // V√©rification des √©l√©ments
    if (!chatbotButton || !chatbotWindow) {
        console.error('‚ùå √âl√©ments du chatbot non trouv√©s');
        return;
    }
    
    console.log('‚úÖ √âl√©ments du chatbot trouv√©s');
    
    // ==========================================
    // Fonctions utilitaires
    // ==========================================
    
    // Formater le markdown avec support √©tendu
    function formatMarkdown(text) {
        return text
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/`(.*?)`/g, '<code>$1</code>')
            .replace(/\n/g, '<br>')
            // Support des listes
            .replace(/^‚Ä¢ (.+)$/gm, '<li>$1</li>')
            .replace(/^- (.+)$/gm, '<li>$1</li>')
            // Support des liens
            .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener">$1</a>');
    }
    
    // Obtenir l'heure actuelle
    function getCurrentTime() {
        const now = new Date();
        return now.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });
    }
    
    // Scroll fluide vers le bas
    function scrollToBottom(smooth = true) {
        if (smooth) {
            chatbotMessages.scrollTo({
                top: chatbotMessages.scrollHeight,
                behavior: 'smooth'
            });
        } else {
            chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
        }
    }
    
    // Auto-resize du textarea
    function autoResizeTextarea() {
        chatbotInput.style.height = 'auto';
        chatbotInput.style.height = Math.min(chatbotInput.scrollHeight, 120) + 'px';
    }
    
    // ==========================================
    // Fonctions de gestion des messages
    // ==========================================
    
    // Ajouter un message
    function addMessage(content, isBot = true) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isBot ? 'bot' : 'user'}`;
        
        const avatarDiv = document.createElement('div');
        avatarDiv.className = 'message-avatar';
        avatarDiv.innerHTML = `<i class="fas fa-${isBot ? 'robot' : 'user'}"></i>`;
        
        const contentDiv = document.createElement('div');
        contentDiv.style.display = 'flex';
        contentDiv.style.flexDirection = 'column';
        contentDiv.style.gap = '4px';
        
        const textDiv = document.createElement('div');
        textDiv.className = 'message-content';
        textDiv.innerHTML = formatMarkdown(content);
        
        const timeDiv = document.createElement('div');
        timeDiv.className = 'message-time';
        timeDiv.textContent = getCurrentTime();
        
        contentDiv.appendChild(textDiv);
        contentDiv.appendChild(timeDiv);
        
        if (isBot) {
            messageDiv.appendChild(avatarDiv);
            messageDiv.appendChild(contentDiv);
        } else {
            messageDiv.appendChild(contentDiv);
            messageDiv.appendChild(avatarDiv);
        }
        
        chatbotMessages.appendChild(messageDiv);
        scrollToBottom();
        
        // Ajouter effet sonore l√©ger (optionnel)
        playMessageSound(isBot);
    }
    
    // Effet sonore l√©ger pour les messages (optionnel)
    function playMessageSound(isBot) {
        // Peut √™tre activ√© pour ajouter un feedback audio
        // const audio = new Audio(isBot ? '/static/sounds/bot.mp3' : '/static/sounds/user.mp3');
        // audio.volume = 0.2;
        // audio.play().catch(e => console.log('Son d√©sactiv√©'));
    }
    
    // Afficher l'indicateur de frappe
    function showTypingIndicator() {
        if (document.getElementById('typing-indicator')) return;
        
        const typingDiv = document.createElement('div');
        typingDiv.className = 'typing-indicator';
        typingDiv.id = 'typing-indicator';
        
        typingDiv.innerHTML = `
            <div class="message-avatar">
                <i class="fas fa-robot"></i>
            </div>
            <div class="typing-dots">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
        `;
        
        chatbotMessages.appendChild(typingDiv);
        scrollToBottom();
        isTyping = true;
    }
    
    // Masquer l'indicateur de frappe
    function hideTypingIndicator() {
        const typingIndicator = document.getElementById('typing-indicator');
        if (typingIndicator) {
            typingIndicator.style.animation = 'messageSlideIn 0.3s ease reverse';
            setTimeout(() => typingIndicator.remove(), 300);
        }
        isTyping = false;
    }
    
    // Afficher les suggestions rapides
    function showQuickSuggestions() {
        const suggestionsContainer = document.querySelector('.quick-suggestions');
        if (!suggestionsContainer) return;
        
        suggestionsContainer.innerHTML = '';
        suggestionsContainer.style.display = 'flex';
        
        QUICK_SUGGESTIONS.forEach((suggestion, index) => {
            const chip = document.createElement('div');
            chip.className = 'suggestion-chip';
            chip.innerHTML = `<i class="fas fa-lightbulb"></i>${suggestion}`;
            chip.style.animationDelay = `${index * 0.1}s`;
            chip.onclick = () => {
                chatbotInput.value = suggestion.replace(/[üß†‚ö°üéØüë§üî¨]/g, '').trim();
                sendMessage();
            };
            suggestionsContainer.appendChild(chip);
        });
    }
    
    // Masquer les suggestions
    function hideSuggestions() {
        const suggestionsContainer = document.querySelector('.quick-suggestions');
        if (suggestionsContainer) {
            suggestionsContainer.style.display = 'none';
        }
    }
    
    // ==========================================
    // Fonctions API
    // ==========================================
    
    // Appeler l'API Gemini
    async function callGeminiAPI(userMessage) {
        try {
            const response = await fetch('/api/visitor-chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: userMessage,
                    history: conversationHistory
                })
            });
            
            const data = await response.json();
            
            if (response.status === 429) {
                const retryAfter = data.retry_after || 15;
                return `‚ö†Ô∏è **Quota d'utilisation d√©pass√©**\n\nLe service de chat a atteint sa limite gratuite de 250 requ√™tes par jour.\n\n‚è±Ô∏è Veuillez r√©essayer dans **${retryAfter} secondes** ou contactez-nous pour plus d'informations.\n\nüìß Email: mohammed.betkaoui@neuroscan.ai\nüìû T√©l√©phone: +123783962348`;
            }
            
            if (!response.ok) {
                throw new Error(`Erreur HTTP: ${response.status}`);
            }
            
            if (data.success) {
                conversationHistory = data.history;
                return data.response;
            } else {
                if (data.error === 'quota_exceeded') {
                    const retryAfter = data.retry_after || 15;
                    return `‚ö†Ô∏è **Quota d'utilisation d√©pass√©**\n\nLe service de chat a atteint sa limite gratuite de 250 requ√™tes par jour.\n\n‚è±Ô∏è Veuillez r√©essayer dans **${retryAfter} secondes**.\n\nüí° **Astuce**: Vous pouvez toujours cr√©er un compte et explorer les fonctionnalit√©s d'analyse IA sans limitation!`;
                } else {
                    throw new Error(data.message || data.error || 'Erreur inconnue');
                }
            }
        } catch (error) {
            console.error('Erreur API:', error);
            return `üòî **Service temporairement indisponible**\n\nD√©sol√©, je rencontre un probl√®me technique.\n\nüîÑ Veuillez r√©essayer dans quelques instants ou contactez notre support:\nüìß mohammed.betkaoui@neuroscan.ai\nüìû +123783962348`;
        }
    }
    
    // ==========================================
    // Fonctions principales
    // ==========================================
    
    // Envoyer un message
    async function sendMessage() {
        const message = chatbotInput.value.trim();
        
        if (!message || isTyping) return;
        
        // Ajouter le message utilisateur
        addMessage(message, false);
        chatbotInput.value = '';
        chatbotInput.style.height = 'auto';
        chatbotSend.disabled = true;
        
        // Masquer les suggestions
        hideSuggestions();
        
        // Afficher l'indicateur de frappe
        showTypingIndicator();
        
        // Appeler l'API avec d√©lai r√©aliste
        setTimeout(async () => {
            const response = await callGeminiAPI(message);
            
            // Masquer l'indicateur de frappe
            hideTypingIndicator();
            
            // Ajouter la r√©ponse du bot avec d√©lai pour effet naturel
            setTimeout(() => {
                addMessage(response, true);
                chatbotSend.disabled = false;
                chatbotInput.focus();
            }, 300);
        }, 800);
    }
    
    // Ouvrir/fermer le chatbot
    function toggleChatbot() {
        isOpen = !isOpen;
        chatbotWindow.classList.toggle('show', isOpen);
        
        if (isOpen) {
            chatbotButton.classList.remove('attention');
            chatbotInput.focus();
            
            // Afficher le message de bienvenue si c'est la premi√®re ouverture
            if (conversationHistory.length === 0) {
                setTimeout(() => {
                    addMessage(WELCOME_MESSAGE, true);
                    showQuickSuggestions();
                }, 400);
            }
            
            // Marquer comme vu dans le localStorage
            localStorage.setItem('chatbot_opened', 'true');
        } else {
            // Sauvegarder l'√©tat
            saveChatState();
        }
    }
    
    // Sauvegarder l'√©tat du chat
    function saveChatState() {
        try {
            localStorage.setItem('chatbot_history', JSON.stringify(conversationHistory));
        } catch (e) {
            console.log('Impossible de sauvegarder l\'historique');
        }
    }
    
    // Restaurer l'√©tat du chat
    function restoreChatState() {
        try {
            const savedHistory = localStorage.getItem('chatbot_history');
            if (savedHistory) {
                conversationHistory = JSON.parse(savedHistory);
            }
        } catch (e) {
            console.log('Impossible de restaurer l\'historique');
        }
    }
    
    // ==========================================
    // Event Listeners
    // ==========================================
    
    // Bouton chatbot - Toggle
    chatbotButton.addEventListener('click', toggleChatbot);
    
    // Bouton fermeture
    chatbotClose.addEventListener('click', toggleChatbot);
    
    // Bouton envoi
    chatbotSend.addEventListener('click', sendMessage);
    
    // Input - Entr√©e pour envoyer
    chatbotInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    
    // Input - Auto-resize et activation bouton
    chatbotInput.addEventListener('input', () => {
        autoResizeTextarea();
        chatbotSend.disabled = !chatbotInput.value.trim();
    });
    
    // Input - Shift+Enter pour nouvelle ligne
    chatbotInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && e.shiftKey) {
            e.stopPropagation();
        }
    });
    
    // Fermer avec Escape
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && isOpen) {
            toggleChatbot();
        }
    });
    
    // Fermer en cliquant √† l'ext√©rieur (optionnel)
    document.addEventListener('click', (e) => {
        if (isOpen && 
            !chatbotWindow.contains(e.target) && 
            !chatbotButton.contains(e.target)) {
            // Optionnel: d√©commenter pour fermer en cliquant dehors
            // toggleChatbot();
        }
    });
    
    // ==========================================
    // Initialisation
    // ==========================================
    
    // Restaurer l'√©tat sauvegard√©
    restoreChatState();
    
    // Animation d'attention au d√©marrage (si pas d√©j√† ouvert)
    const hasOpened = localStorage.getItem('chatbot_opened');
    if (!hasOpened) {
        setTimeout(() => {
            chatbotButton.classList.add('attention');
        }, 3000);
        
        // Retirer l'animation apr√®s 15 secondes
        setTimeout(() => {
            chatbotButton.classList.remove('attention');
        }, 18000);
    }
    
    // Afficher tooltip au survol (optionnel)
    let tooltipTimeout;
    chatbotButton.addEventListener('mouseenter', () => {
        if (!isOpen) {
            tooltipTimeout = setTimeout(() => {
                // Cr√©er tooltip
                const tooltip = document.createElement('div');
                tooltip.id = 'chatbot-tooltip';
                tooltip.style.cssText = `
                    position: fixed;
                    bottom: 105px;
                    right: 24px;
                    background: linear-gradient(135deg, #667eea, #764ba2);
                    color: white;
                    padding: 12px 18px;
                    border-radius: 16px;
                    font-size: 14px;
                    font-weight: 600;
                    box-shadow: 0 8px 24px rgba(102, 126, 234, 0.4);
                    z-index: 999;
                    animation: slideInUp 0.3s ease;
                    white-space: nowrap;
                `;
                tooltip.textContent = 'üí¨ Besoin d\'aide? Cliquez ici!';
                document.body.appendChild(tooltip);
            }, 1000);
        }
    });
    
    chatbotButton.addEventListener('mouseleave', () => {
        clearTimeout(tooltipTimeout);
        const tooltip = document.getElementById('chatbot-tooltip');
        if (tooltip) {
            tooltip.style.animation = 'slideInUp 0.3s ease reverse';
            setTimeout(() => tooltip.remove(), 300);
        }
    });
    
    // Support du copier-coller d'images (fonctionnalit√© avanc√©e - optionnel)
    chatbotInput.addEventListener('paste', (e) => {
        const items = e.clipboardData?.items;
        if (items) {
            for (let item of items) {
                if (item.type.indexOf('image') !== -1) {
                    e.preventDefault();
                    addMessage('‚ÑπÔ∏è Les images ne sont pas support√©es dans ce chat. Pour analyser une image m√©dicale, veuillez vous connecter √† votre compte.', true);
                    break;
                }
            }
        }
    });
    
    // D√©tection de l'inactivit√© (optionnel)
    let inactivityTimer;
    function resetInactivityTimer() {
        clearTimeout(inactivityTimer);
        if (isOpen && conversationHistory.length > 0) {
            inactivityTimer = setTimeout(() => {
                if (!isTyping) {
                    addMessage('üëã Vous avez d\'autres questions? Je suis toujours l√† pour vous aider!', true);
                }
            }, 120000); // 2 minutes
        }
    }
    
    // Reset timer lors d'une interaction
    chatbotInput.addEventListener('focus', resetInactivityTimer);
    chatbotMessages.addEventListener('scroll', resetInactivityTimer);
    
    // Log d'initialisation r√©ussie
    console.log('‚úÖ Chatbot visiteurs initialis√© avec succ√®s (Version Pro)');
    console.log('üìä Fonctionnalit√©s activ√©es:');
    console.log('   - Messages format√©s (Markdown)');
    console.log('   - Suggestions rapides');
    console.log('   - Auto-resize textarea');
    console.log('   - Sauvegarde √©tat');
    console.log('   - Animations fluides');
    console.log('   - Responsive design');
    console.log('   - Raccourcis clavier (Enter, Shift+Enter, Esc)');
    console.log('   - D√©tection inactivit√©');
    
    // Analytics (optionnel - pour suivre l'utilisation)
    if (window.gtag) {
        chatbotButton.addEventListener('click', () => {
            gtag('event', 'chatbot_opened', {
                event_category: 'engagement',
                event_label: 'visitor_chatbot'
            });
        });
    }
});

// ==========================================
// Fin du fichier JavaScript
// ==========================================
