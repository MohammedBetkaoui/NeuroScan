"""
Script de test pour v√©rifier la connexion MongoDB
"""

import sys
import os
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

print("=" * 60)
print("üß™ Test de connexion MongoDB pour NeuroScan AI")
print("=" * 60)

# Afficher les informations de configuration
MONGODB_URI = os.getenv('MONGODB_URI', '')
MONGODB_DB_NAME = os.getenv('MONGODB_DB_NAME', 'NeuroScan')

# Masquer le mot de passe dans l'affichage
masked_uri = MONGODB_URI
if '@' in MONGODB_URI:
    parts = MONGODB_URI.split('@')
    if '//' in parts[0]:
        protocol_and_creds = parts[0].split('//')
        if ':' in protocol_and_creds[1]:
            username = protocol_and_creds[1].split(':')[0]
            masked_uri = f"{protocol_and_creds[0]}//{username}:****@{parts[1]}"

print(f"\nüìã Configuration:")
print(f"   URI MongoDB: {masked_uri}")
print(f"   Base de donn√©es: {MONGODB_DB_NAME}")

try:
    print("\nüîå Importation du connecteur MongoDB...")
    from database.mongodb_connector import mongodb_connector, get_mongodb
    
    print("‚úÖ Connecteur import√© avec succ√®s")
    
    print("\nüîó Test de connexion au cluster MongoDB Atlas...")
    if mongodb_connector.test_connection():
        print("‚úÖ Connexion √©tablie avec succ√®s!")
        
        # R√©cup√©rer la base de donn√©es
        db = get_mongodb()
        
        if db is not None:
            print(f"\nüìä Base de donn√©es active: {db.name}")
            
            # Lister les collections
            print("\nüìÅ Collections existantes:")
            collections = db.list_collection_names()
            if collections:
                for col in collections:
                    count = db[col].count_documents({})
                    print(f"   - {col}: {count} documents")
            else:
                print("   Aucune collection (base de donn√©es vide - normal pour une nouvelle installation)")
            
            # Test d'√©criture
            print("\n‚úçÔ∏è  Test d'√©criture...")
            test_collection = db.test_collection
            result = test_collection.insert_one({
                'test': True,
                'message': 'Test de connexion NeuroScan AI',
                'timestamp': '2025-10-10'
            })
            print(f"‚úÖ Document de test ins√©r√© avec ID: {result.inserted_id}")
            
            # Test de lecture
            print("\nüìñ Test de lecture...")
            doc = test_collection.find_one({'test': True})
            if doc:
                print(f"‚úÖ Document lu: {doc.get('message')}")
            
            # Nettoyage
            print("\nüßπ Nettoyage...")
            test_collection.delete_one({'test': True})
            print("‚úÖ Document de test supprim√©")
            
            print("\n" + "=" * 60)
            print("‚úÖ TOUS LES TESTS R√âUSSIS!")
            print("=" * 60)
            print("\nüí° Votre configuration MongoDB est pr√™te pour NeuroScan AI")
            print("   Vous pouvez maintenant lancer: python3 app_web.py")
            
        else:
            print("‚ùå Impossible d'acc√©der √† la base de donn√©es")
            sys.exit(1)
    else:
        print("‚ùå √âchec de la connexion au cluster MongoDB")
        print("\nüîç V√©rifications √† effectuer:")
        print("   1. V√©rifiez votre connexion Internet")
        print("   2. V√©rifiez que l'IP de votre machine est autoris√©e dans MongoDB Atlas")
        print("   3. V√©rifiez le mot de passe dans le fichier .env")
        print("   4. V√©rifiez que le cluster existe et est actif")
        sys.exit(1)
        
except ImportError as e:
    print(f"‚ùå Erreur d'importation: {e}")
    print("\nüí° Solution: Installez les d√©pendances manquantes")
    print("   pip install pymongo python-dotenv")
    sys.exit(1)
    
except Exception as e:
    print(f"‚ùå Erreur lors du test: {e}")
    print(f"\nüîç Type d'erreur: {type(e).__name__}")
    
    # Suggestions selon le type d'erreur
    if "DNS" in str(e) or "resolve" in str(e).lower():
        print("\nüí° Probl√®me de r√©solution DNS d√©tect√©")
        print("   Solutions possibles:")
        print("   1. V√©rifiez votre connexion Internet")
        print("   2. Essayez de changer de DNS (ex: 8.8.8.8)")
        print("   3. V√©rifiez que le nom du cluster est correct")
    elif "authentication" in str(e).lower() or "auth" in str(e).lower():
        print("\nüí° Probl√®me d'authentification d√©tect√©")
        print("   Solutions possibles:")
        print("   1. V√©rifiez le nom d'utilisateur et le mot de passe dans .env")
        print("   2. V√©rifiez que l'utilisateur existe dans MongoDB Atlas")
        print("   3. Caract√®res sp√©ciaux dans le mot de passe? Encodez-les en URL")
    elif "timeout" in str(e).lower():
        print("\nüí° Probl√®me de timeout d√©tect√©")
        print("   Solutions possibles:")
        print("   1. V√©rifiez que votre IP est autoris√©e dans MongoDB Atlas")
        print("   2. V√©rifiez votre pare-feu")
        print("   3. Essayez d'augmenter le timeout dans mongodb_connector.py")
    
    sys.exit(1)
