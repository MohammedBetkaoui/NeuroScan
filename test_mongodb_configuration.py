"""
Script de test pour v√©rifier la configuration MongoDB de NeuroScan AI
"""

import sys
import os
from datetime import datetime
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

print("=" * 70)
print("üß™ TEST DE CONFIGURATION MONGODB POUR NEUROSCAN AI")
print("=" * 70)

# Test 1: V√©rifier les variables d'environnement
print("\nüìã Test 1: V√©rification des variables d'environnement")
print("-" * 70)

mongodb_uri = os.getenv('MONGODB_URI')
mongodb_db_name = os.getenv('MONGODB_DB_NAME', 'NeuroScan')

if mongodb_uri:
    # Masquer le mot de passe pour l'affichage
    safe_uri = mongodb_uri.split('@')[1] if '@' in mongodb_uri else mongodb_uri
    print(f"‚úÖ MONGODB_URI configur√©: ...@{safe_uri}")
else:
    print("‚ùå MONGODB_URI non configur√© dans .env")
    sys.exit(1)

print(f"‚úÖ MONGODB_DB_NAME: {mongodb_db_name}")

# Test 2: Import du connecteur MongoDB
print("\nüì¶ Test 2: Import du connecteur MongoDB")
print("-" * 70)

try:
    from database.mongodb_connector import mongodb_connector, get_mongodb, get_collection
    print("‚úÖ Modules MongoDB import√©s avec succ√®s")
except Exception as e:
    print(f"‚ùå Erreur d'import: {e}")
    sys.exit(1)

# Test 3: Test de connexion
print("\nüîå Test 3: Test de connexion √† MongoDB")
print("-" * 70)

try:
    if mongodb_connector.test_connection():
        print("‚úÖ Connexion MongoDB r√©ussie")
    else:
        print("‚ùå √âchec de connexion MongoDB")
        sys.exit(1)
except Exception as e:
    print(f"‚ùå Erreur de connexion: {e}")
    sys.exit(1)

# Test 4: V√©rification des collections
print("\nüìö Test 4: V√©rification des collections")
print("-" * 70)

try:
    db = get_mongodb()
    collections = db.list_collection_names()
    
    required_collections = [
        'analyses', 'patients', 'tumor_evolution', 'medical_alerts',
        'notifications', 'daily_stats', 'doctors', 'doctor_sessions',
        'chat_conversations', 'chat_messages', 'chat_attachments'
    ]
    
    print(f"Collections existantes: {len(collections)}")
    for coll in required_collections:
        if coll in collections:
            print(f"  ‚úÖ {coll}")
        else:
            print(f"  ‚ö†Ô∏è  {coll} (sera cr√©√©e automatiquement)")
    
except Exception as e:
    print(f"‚ùå Erreur lors de la v√©rification des collections: {e}")

# Test 5: Test d'√©criture/lecture
print("\n‚úçÔ∏è  Test 5: Test d'√©criture et lecture")
print("-" * 70)

try:
    test_collection = db['test_collection']
    
    # Ins√©rer un document de test
    test_doc = {
        'test': True,
        'message': 'Test NeuroScan AI',
        'timestamp': datetime.now()
    }
    result = test_collection.insert_one(test_doc)
    print(f"‚úÖ Document ins√©r√© avec ID: {result.inserted_id}")
    
    # Lire le document
    found_doc = test_collection.find_one({'_id': result.inserted_id})
    if found_doc:
        print(f"‚úÖ Document lu avec succ√®s")
        print(f"   Message: {found_doc['message']}")
    
    # Supprimer le document de test
    test_collection.delete_one({'_id': result.inserted_id})
    print(f"‚úÖ Document de test supprim√©")
    
except Exception as e:
    print(f"‚ùå Erreur lors du test d'√©criture/lecture: {e}")

# Test 6: Test des fonctions helper MongoDB
print("\nüîß Test 6: Test des fonctions helper MongoDB")
print("-" * 70)

try:
    from database.mongodb_helpers import (
        save_analysis_to_db_mongo,
        manage_patient_record_mongo,
        get_doctor_statistics_mongo
    )
    print("‚úÖ Fonctions helper import√©es avec succ√®s:")
    print("  - save_analysis_to_db_mongo")
    print("  - manage_patient_record_mongo")
    print("  - get_doctor_statistics_mongo")
except Exception as e:
    print(f"‚ùå Erreur d'import des fonctions helper: {e}")

# Test 7: Statistiques de la base de donn√©es
print("\nüìä Test 7: Statistiques de la base de donn√©es")
print("-" * 70)

try:
    db_stats = db.command("dbStats")
    print(f"‚úÖ Nom de la base: {db_stats['db']}")
    print(f"‚úÖ Nombre de collections: {db_stats['collections']}")
    print(f"‚úÖ Taille des donn√©es: {db_stats['dataSize'] / 1024:.2f} KB")
    print(f"‚úÖ Taille de stockage: {db_stats['storageSize'] / 1024:.2f} KB")
except Exception as e:
    print(f"‚ö†Ô∏è  Impossible de r√©cup√©rer les statistiques: {e}")

# Test 8: Test de s√©curit√©
print("\nüîí Test 8: V√©rification de la s√©curit√©")
print("-" * 70)

if '@2002' in mongodb_uri or 'betkaoui@2002' in mongodb_uri:
    print("‚ö†Ô∏è  ATTENTION: Le mot de passe est visible dans l'URI")
    print("   Recommandation: Utiliser des variables d'environnement s√©curis√©es")
    print("   Le mot de passe doit √™tre encod√© en URL: betkaoui%402002")

if mongodb_uri.startswith('mongodb+srv://'):
    print("‚úÖ Utilisation de MongoDB Atlas (connexion s√©curis√©e)")
else:
    print("‚ö†Ô∏è  Connexion non s√©curis√©e d√©tect√©e")

# R√©sum√© final
print("\n" + "=" * 70)
print("‚úÖ TESTS TERMIN√âS AVEC SUCC√àS")
print("=" * 70)
print(f"\nüìù R√©sum√©:")
print(f"  - Base de donn√©es: {mongodb_db_name}")
print(f"  - Serveur MongoDB: Cluster0.xdhjsc1.mongodb.net")
print(f"  - Status: Op√©rationnel")
print(f"\nüöÄ Votre application NeuroScan AI est pr√™te √† utiliser MongoDB!")
print("=" * 70)
